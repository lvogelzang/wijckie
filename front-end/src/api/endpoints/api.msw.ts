/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Wijckie API
 * Default back-end API for Wijckie.io
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  DefaultOKResponse,
  User
} from '../models/api';


export const getCsrfRetrieveResponseMock = (overrideResponse: Partial< DefaultOKResponse > = {}): DefaultOKResponse => ({status: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})

export const getUsersListResponseMock = (): User[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({url: faker.internet.url(), username: faker.helpers.fromRegExp('^[\w.@+-]+$'), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getUsersCreateResponseMock = (overrideResponse: Partial< User > = {}): User => ({url: faker.internet.url(), username: faker.helpers.fromRegExp('^[\w.@+-]+$'), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getUsersRetrieveResponseMock = (overrideResponse: Partial< User > = {}): User => ({url: faker.internet.url(), username: faker.helpers.fromRegExp('^[\w.@+-]+$'), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getUsersUpdateResponseMock = (overrideResponse: Partial< User > = {}): User => ({url: faker.internet.url(), username: faker.helpers.fromRegExp('^[\w.@+-]+$'), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})

export const getUsersPartialUpdateResponseMock = (overrideResponse: Partial< User > = {}): User => ({url: faker.internet.url(), username: faker.helpers.fromRegExp('^[\w.@+-]+$'), email: faker.helpers.arrayElement([faker.internet.email(), undefined]), is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), ...overrideResponse})


export const getCsrfRetrieveMockHandler = (overrideResponse?: DefaultOKResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DefaultOKResponse> | DefaultOKResponse)) => {
  return http.get('*/api/v1/csrf/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getCsrfRetrieveResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersListMockHandler = (overrideResponse?: User[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User[]> | User[])) => {
  return http.get('*/api/v1/users/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersCreateMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<User> | User)) => {
  return http.post('*/api/v1/users/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersCreateResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersRetrieveMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) => {
  return http.get('*/api/v1/users/:id/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersRetrieveResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersUpdateMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<User> | User)) => {
  return http.put('*/api/v1/users/:id/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersPartialUpdateMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<User> | User)) => {
  return http.patch('*/api/v1/users/:id/', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getUsersPartialUpdateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUsersDestroyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/users/:id/', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getWijckieAPIMock = () => [
  getCsrfRetrieveMockHandler(),
  getUsersListMockHandler(),
  getUsersCreateMockHandler(),
  getUsersRetrieveMockHandler(),
  getUsersUpdateMockHandler(),
  getUsersPartialUpdateMockHandler(),
  getUsersDestroyMockHandler()
]
