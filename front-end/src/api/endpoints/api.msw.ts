/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Wijckie API
 * Default API for Wijckie
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker"

import { HttpResponse, delay, http } from "msw"

import { StatusEnum, TypeEnum } from "../models/api"
import type {
    CreateDailyTodoItem,
    CreateDailyTodoOption,
    CreateDailyTodosWidget,
    CreateInspirationItem,
    CreateInspirationOption,
    CreateInspirationWidget,
    DailyTodoItem,
    DailyTodoOption,
    DailyTodosModule,
    DailyTodosWidget,
    DefaultOKResponse,
    FileUpload,
    InspirationModule,
    InspirationOption,
    InspirationWidget,
    PaginatedDailyTodoItemList,
    PaginatedDailyTodoOptionList,
    PaginatedDailyTodosModuleList,
    PaginatedDailyTodosWidgetList,
    PaginatedInspirationItemList,
    PaginatedInspirationModuleList,
    PaginatedInspirationOptionList,
    PaginatedInspirationWidgetList,
    PaginatedUserList,
    User,
    WidgetsBatch,
} from "../models/api"

export const getCsrfRetrieveResponseMock = (overrideResponse: Partial<DefaultOKResponse> = {}): DefaultOKResponse => ({
    status: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    ...overrideResponse,
})

export const getDailyTodoItemsListResponseMock = (overrideResponse: Partial<PaginatedDailyTodoItemList> = {}): PaginatedDailyTodoItemList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        date: faker.date.past().toISOString().split("T")[0],
        option: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        status: faker.helpers.arrayElement(Object.values(StatusEnum)),
    })),
    ...overrideResponse,
})

export const getDailyTodoItemsCreateResponseMock = (overrideResponse: Partial<CreateDailyTodoItem> = {}): CreateDailyTodoItem => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    date: faker.date.past().toISOString().split("T")[0],
    option: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    status: faker.helpers.arrayElement(Object.values(StatusEnum)),
    ...overrideResponse,
})

export const getDailyTodoItemsUpdateResponseMock = (overrideResponse: Partial<DailyTodoItem> = {}): DailyTodoItem => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    date: faker.date.past().toISOString().split("T")[0],
    option: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    status: faker.helpers.arrayElement(Object.values(StatusEnum)),
    ...overrideResponse,
})

export const getDailyTodoItemsPartialUpdateResponseMock = (overrideResponse: Partial<DailyTodoItem> = {}): DailyTodoItem => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    date: faker.date.past().toISOString().split("T")[0],
    option: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    status: faker.helpers.arrayElement(Object.values(StatusEnum)),
    ...overrideResponse,
})

export const getDailyTodoOptionsListResponseMock = (overrideResponse: Partial<PaginatedDailyTodoOptionList> = {}): PaginatedDailyTodoOptionList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        name: faker.string.alpha({ length: { min: 1, max: 30 } }),
        text: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    ...overrideResponse,
})

export const getDailyTodoOptionsCreateResponseMock = (overrideResponse: Partial<CreateDailyTodoOption> = {}): CreateDailyTodoOption => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    text: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getDailyTodoOptionsRetrieveResponseMock = (overrideResponse: Partial<DailyTodoOption> = {}): DailyTodoOption => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    text: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getDailyTodoOptionsUpdateResponseMock = (overrideResponse: Partial<DailyTodoOption> = {}): DailyTodoOption => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    text: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getDailyTodoOptionsPartialUpdateResponseMock = (overrideResponse: Partial<DailyTodoOption> = {}): DailyTodoOption => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    text: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getDailyTodosModulesListResponseMock = (overrideResponse: Partial<PaginatedDailyTodosModuleList> = {}): PaginatedDailyTodosModuleList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    ...overrideResponse,
})

export const getDailyTodosModulesCreateResponseMock = (overrideResponse: Partial<DailyTodosModule> = {}): DailyTodosModule => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getDailyTodosModulesRetrieveResponseMock = (overrideResponse: Partial<DailyTodosModule> = {}): DailyTodosModule => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getDailyTodosModulesUpdateResponseMock = (overrideResponse: Partial<DailyTodosModule> = {}): DailyTodosModule => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getDailyTodosModulesPartialUpdateResponseMock = (overrideResponse: Partial<DailyTodosModule> = {}): DailyTodosModule => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getDailyTodosWidgetsListResponseMock = (overrideResponse: Partial<PaginatedDailyTodosWidgetList> = {}): PaginatedDailyTodosWidgetList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    })),
    ...overrideResponse,
})

export const getDailyTodosWidgetsCreateResponseMock = (overrideResponse: Partial<CreateDailyTodosWidget> = {}): CreateDailyTodosWidget => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    ...overrideResponse,
})

export const getDailyTodosWidgetsRetrieveResponseMock = (overrideResponse: Partial<DailyTodosWidget> = {}): DailyTodosWidget => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    ...overrideResponse,
})

export const getDailyTodosWidgetsUpdateResponseMock = (overrideResponse: Partial<DailyTodosWidget> = {}): DailyTodosWidget => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    ...overrideResponse,
})

export const getDailyTodosWidgetsPartialUpdateResponseMock = (overrideResponse: Partial<DailyTodosWidget> = {}): DailyTodosWidget => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    ...overrideResponse,
})

export const getFileUploadsCreateResponseMock = (overrideResponse: Partial<FileUpload> = {}): FileUpload => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    fileUUID: faker.string.uuid(),
    fileName: faker.helpers.fromRegExp('^[^<>:;,?"*|/]+$'),
    fileUploadURL: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationItemsListResponseMock = (overrideResponse: Partial<PaginatedInspirationItemList> = {}): PaginatedInspirationItemList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        date: faker.date.past().toISOString().split("T")[0],
        option: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    })),
    ...overrideResponse,
})

export const getInspirationItemsCreateResponseMock = (overrideResponse: Partial<CreateInspirationItem> = {}): CreateInspirationItem => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    date: faker.date.past().toISOString().split("T")[0],
    option: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    ...overrideResponse,
})

export const getInspirationModulesListResponseMock = (overrideResponse: Partial<PaginatedInspirationModuleList> = {}): PaginatedInspirationModuleList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    ...overrideResponse,
})

export const getInspirationModulesCreateResponseMock = (overrideResponse: Partial<InspirationModule> = {}): InspirationModule => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationModulesRetrieveResponseMock = (overrideResponse: Partial<InspirationModule> = {}): InspirationModule => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationModulesUpdateResponseMock = (overrideResponse: Partial<InspirationModule> = {}): InspirationModule => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationModulesPartialUpdateResponseMock = (overrideResponse: Partial<InspirationModule> = {}): InspirationModule => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    user: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    createdAt: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationOptionsListResponseMock = (overrideResponse: Partial<PaginatedInspirationOptionList> = {}): PaginatedInspirationOptionList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        name: faker.string.alpha({ length: { min: 10, max: 20 } }),
        type: faker.helpers.arrayElement(Object.values(TypeEnum)),
        text: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
        image: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }), undefined]),
        imageURL: faker.string.alpha({ length: { min: 10, max: 20 } }),
    })),
    ...overrideResponse,
})

export const getInspirationOptionsCreateResponseMock = (overrideResponse: Partial<CreateInspirationOption> = {}): CreateInspirationOption => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement(Object.values(TypeEnum)),
    text: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    image: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }), undefined]),
    imageURL: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationOptionsRetrieveResponseMock = (overrideResponse: Partial<InspirationOption> = {}): InspirationOption => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement(Object.values(TypeEnum)),
    text: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    image: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }), undefined]),
    imageURL: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationOptionsUpdateResponseMock = (overrideResponse: Partial<InspirationOption> = {}): InspirationOption => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement(Object.values(TypeEnum)),
    text: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    image: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }), undefined]),
    imageURL: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationOptionsPartialUpdateResponseMock = (overrideResponse: Partial<InspirationOption> = {}): InspirationOption => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    type: faker.helpers.arrayElement(Object.values(TypeEnum)),
    text: faker.helpers.arrayElement([faker.string.alpha({ length: { min: 10, max: 20 } }), undefined]),
    image: faker.helpers.arrayElement([faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }), undefined]),
    imageURL: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ...overrideResponse,
})

export const getInspirationWidgetsListResponseMock = (overrideResponse: Partial<PaginatedInspirationWidgetList> = {}): PaginatedInspirationWidgetList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    })),
    ...overrideResponse,
})

export const getInspirationWidgetsCreateResponseMock = (overrideResponse: Partial<CreateInspirationWidget> = {}): CreateInspirationWidget => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    ...overrideResponse,
})

export const getInspirationWidgetsRetrieveResponseMock = (overrideResponse: Partial<InspirationWidget> = {}): InspirationWidget => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    ...overrideResponse,
})

export const getInspirationWidgetsUpdateResponseMock = (overrideResponse: Partial<InspirationWidget> = {}): InspirationWidget => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    ...overrideResponse,
})

export const getInspirationWidgetsPartialUpdateResponseMock = (overrideResponse: Partial<InspirationWidget> = {}): InspirationWidget => ({
    id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    ...overrideResponse,
})

export const getUsersListResponseMock = (overrideResponse: Partial<PaginatedUserList> = {}): PaginatedUserList => ({
    pageCount: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    results: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        url: faker.internet.url(),
        username: faker.helpers.fromRegExp("^[\w.@+-]+$"),
        email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
        is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    })),
    ...overrideResponse,
})

export const getUsersCreateResponseMock = (overrideResponse: Partial<User> = {}): User => ({
    url: faker.internet.url(),
    username: faker.helpers.fromRegExp("^[\w.@+-]+$"),
    email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
    is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    ...overrideResponse,
})

export const getUsersRetrieveResponseMock = (overrideResponse: Partial<User> = {}): User => ({
    url: faker.internet.url(),
    username: faker.helpers.fromRegExp("^[\w.@+-]+$"),
    email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
    is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    ...overrideResponse,
})

export const getUsersUpdateResponseMock = (overrideResponse: Partial<User> = {}): User => ({
    url: faker.internet.url(),
    username: faker.helpers.fromRegExp("^[\w.@+-]+$"),
    email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
    is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    ...overrideResponse,
})

export const getUsersPartialUpdateResponseMock = (overrideResponse: Partial<User> = {}): User => ({
    url: faker.internet.url(),
    username: faker.helpers.fromRegExp("^[\w.@+-]+$"),
    email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
    is_staff: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    ...overrideResponse,
})

export const getWidgetsRetrieveResponseMock = (overrideResponse: Partial<WidgetsBatch> = {}): WidgetsBatch => ({
    dailyTodos: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    })),
    inspiration: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
        id: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        module: faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
        name: faker.string.alpha({ length: { min: 1, max: 30 } }),
    })),
    ...overrideResponse,
})

export const getCsrfRetrieveMockHandler = (overrideResponse?: DefaultOKResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DefaultOKResponse> | DefaultOKResponse)) => {
    return http.get("*/api/v1/csrf/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getCsrfRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoItemsListMockHandler = (
    overrideResponse?: PaginatedDailyTodoItemList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedDailyTodoItemList> | PaginatedDailyTodoItemList)
) => {
    return http.get("*/api/v1/daily-todo-items/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoItemsListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoItemsCreateMockHandler = (
    overrideResponse?: CreateDailyTodoItem | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateDailyTodoItem> | CreateDailyTodoItem)
) => {
    return http.post("*/api/v1/daily-todo-items/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoItemsCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoItemsUpdateMockHandler = (overrideResponse?: DailyTodoItem | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DailyTodoItem> | DailyTodoItem)) => {
    return http.put("*/api/v1/daily-todo-items/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoItemsUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoItemsPartialUpdateMockHandler = (overrideResponse?: DailyTodoItem | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<DailyTodoItem> | DailyTodoItem)) => {
    return http.patch("*/api/v1/daily-todo-items/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoItemsPartialUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoOptionsListMockHandler = (
    overrideResponse?: PaginatedDailyTodoOptionList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedDailyTodoOptionList> | PaginatedDailyTodoOptionList)
) => {
    return http.get("*/api/v1/daily-todo-options/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoOptionsListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoOptionsCreateMockHandler = (
    overrideResponse?: CreateDailyTodoOption | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateDailyTodoOption> | CreateDailyTodoOption)
) => {
    return http.post("*/api/v1/daily-todo-options/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoOptionsCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoOptionsRetrieveMockHandler = (overrideResponse?: DailyTodoOption | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DailyTodoOption> | DailyTodoOption)) => {
    return http.get("*/api/v1/daily-todo-options/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoOptionsRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoOptionsUpdateMockHandler = (overrideResponse?: DailyTodoOption | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DailyTodoOption> | DailyTodoOption)) => {
    return http.put("*/api/v1/daily-todo-options/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoOptionsUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoOptionsPartialUpdateMockHandler = (
    overrideResponse?: DailyTodoOption | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<DailyTodoOption> | DailyTodoOption)
) => {
    return http.patch("*/api/v1/daily-todo-options/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodoOptionsPartialUpdateResponseMock()
            ),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodoOptionsDestroyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
    return http.delete("*/api/v1/daily-todo-options/:id/", async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
            await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
    })
}

export const getDailyTodosModulesListMockHandler = (
    overrideResponse?: PaginatedDailyTodosModuleList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedDailyTodosModuleList> | PaginatedDailyTodosModuleList)
) => {
    return http.get("*/api/v1/daily-todos-modules/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosModulesListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosModulesCreateMockHandler = (
    overrideResponse?: DailyTodosModule | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DailyTodosModule> | DailyTodosModule)
) => {
    return http.post("*/api/v1/daily-todos-modules/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosModulesCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosModulesRetrieveMockHandler = (
    overrideResponse?: DailyTodosModule | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DailyTodosModule> | DailyTodosModule)
) => {
    return http.get("*/api/v1/daily-todos-modules/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosModulesRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosModulesUpdateMockHandler = (
    overrideResponse?: DailyTodosModule | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DailyTodosModule> | DailyTodosModule)
) => {
    return http.put("*/api/v1/daily-todos-modules/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosModulesUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosModulesPartialUpdateMockHandler = (
    overrideResponse?: DailyTodosModule | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<DailyTodosModule> | DailyTodosModule)
) => {
    return http.patch("*/api/v1/daily-todos-modules/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosModulesPartialUpdateResponseMock()
            ),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosModulesDestroyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
    return http.delete("*/api/v1/daily-todos-modules/:id/", async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
            await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
    })
}

export const getDailyTodosWidgetsListMockHandler = (
    overrideResponse?: PaginatedDailyTodosWidgetList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedDailyTodosWidgetList> | PaginatedDailyTodosWidgetList)
) => {
    return http.get("*/api/v1/daily-todos-widgets/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosWidgetsListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosWidgetsCreateMockHandler = (
    overrideResponse?: CreateDailyTodosWidget | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateDailyTodosWidget> | CreateDailyTodosWidget)
) => {
    return http.post("*/api/v1/daily-todos-widgets/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosWidgetsCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosWidgetsRetrieveMockHandler = (
    overrideResponse?: DailyTodosWidget | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DailyTodosWidget> | DailyTodosWidget)
) => {
    return http.get("*/api/v1/daily-todos-widgets/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosWidgetsRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosWidgetsUpdateMockHandler = (
    overrideResponse?: DailyTodosWidget | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DailyTodosWidget> | DailyTodosWidget)
) => {
    return http.put("*/api/v1/daily-todos-widgets/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosWidgetsUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosWidgetsPartialUpdateMockHandler = (
    overrideResponse?: DailyTodosWidget | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<DailyTodosWidget> | DailyTodosWidget)
) => {
    return http.patch("*/api/v1/daily-todos-widgets/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getDailyTodosWidgetsPartialUpdateResponseMock()
            ),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getDailyTodosWidgetsDestroyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
    return http.delete("*/api/v1/daily-todos-widgets/:id/", async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
            await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
    })
}

export const getFileUploadsCreateMockHandler = (overrideResponse?: FileUpload | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FileUpload> | FileUpload)) => {
    return http.post("*/api/v1/file-uploads/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getFileUploadsCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationItemsListMockHandler = (
    overrideResponse?: PaginatedInspirationItemList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedInspirationItemList> | PaginatedInspirationItemList)
) => {
    return http.get("*/api/v1/inspiration-items/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationItemsListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationItemsCreateMockHandler = (
    overrideResponse?: CreateInspirationItem | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateInspirationItem> | CreateInspirationItem)
) => {
    return http.post("*/api/v1/inspiration-items/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationItemsCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationModulesListMockHandler = (
    overrideResponse?: PaginatedInspirationModuleList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedInspirationModuleList> | PaginatedInspirationModuleList)
) => {
    return http.get("*/api/v1/inspiration-modules/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationModulesListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationModulesCreateMockHandler = (
    overrideResponse?: InspirationModule | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<InspirationModule> | InspirationModule)
) => {
    return http.post("*/api/v1/inspiration-modules/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationModulesCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationModulesRetrieveMockHandler = (
    overrideResponse?: InspirationModule | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InspirationModule> | InspirationModule)
) => {
    return http.get("*/api/v1/inspiration-modules/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationModulesRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationModulesUpdateMockHandler = (
    overrideResponse?: InspirationModule | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<InspirationModule> | InspirationModule)
) => {
    return http.put("*/api/v1/inspiration-modules/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationModulesUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationModulesPartialUpdateMockHandler = (
    overrideResponse?: InspirationModule | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<InspirationModule> | InspirationModule)
) => {
    return http.patch("*/api/v1/inspiration-modules/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationModulesPartialUpdateResponseMock()
            ),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationModulesDestroyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
    return http.delete("*/api/v1/inspiration-modules/:id/", async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
            await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
    })
}

export const getInspirationOptionsListMockHandler = (
    overrideResponse?: PaginatedInspirationOptionList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedInspirationOptionList> | PaginatedInspirationOptionList)
) => {
    return http.get("*/api/v1/inspiration-options/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationOptionsListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationOptionsCreateMockHandler = (
    overrideResponse?: CreateInspirationOption | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateInspirationOption> | CreateInspirationOption)
) => {
    return http.post("*/api/v1/inspiration-options/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationOptionsCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationOptionsRetrieveMockHandler = (
    overrideResponse?: InspirationOption | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InspirationOption> | InspirationOption)
) => {
    return http.get("*/api/v1/inspiration-options/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationOptionsRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationOptionsUpdateMockHandler = (
    overrideResponse?: InspirationOption | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<InspirationOption> | InspirationOption)
) => {
    return http.put("*/api/v1/inspiration-options/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationOptionsUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationOptionsPartialUpdateMockHandler = (
    overrideResponse?: InspirationOption | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<InspirationOption> | InspirationOption)
) => {
    return http.patch("*/api/v1/inspiration-options/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationOptionsPartialUpdateResponseMock()
            ),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationOptionsDestroyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
    return http.delete("*/api/v1/inspiration-options/:id/", async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
            await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
    })
}

export const getInspirationWidgetsListMockHandler = (
    overrideResponse?: PaginatedInspirationWidgetList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedInspirationWidgetList> | PaginatedInspirationWidgetList)
) => {
    return http.get("*/api/v1/inspiration-widgets/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationWidgetsListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationWidgetsCreateMockHandler = (
    overrideResponse?: CreateInspirationWidget | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateInspirationWidget> | CreateInspirationWidget)
) => {
    return http.post("*/api/v1/inspiration-widgets/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationWidgetsCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationWidgetsRetrieveMockHandler = (
    overrideResponse?: InspirationWidget | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InspirationWidget> | InspirationWidget)
) => {
    return http.get("*/api/v1/inspiration-widgets/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationWidgetsRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationWidgetsUpdateMockHandler = (
    overrideResponse?: InspirationWidget | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<InspirationWidget> | InspirationWidget)
) => {
    return http.put("*/api/v1/inspiration-widgets/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationWidgetsUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationWidgetsPartialUpdateMockHandler = (
    overrideResponse?: InspirationWidget | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<InspirationWidget> | InspirationWidget)
) => {
    return http.patch("*/api/v1/inspiration-widgets/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getInspirationWidgetsPartialUpdateResponseMock()
            ),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getInspirationWidgetsDestroyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
    return http.delete("*/api/v1/inspiration-widgets/:id/", async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
            await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
    })
}

export const getUsersListMockHandler = (overrideResponse?: PaginatedUserList | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PaginatedUserList> | PaginatedUserList)) => {
    return http.get("*/api/v1/users/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getUsersListResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getUsersCreateMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<User> | User)) => {
    return http.post("*/api/v1/users/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getUsersCreateResponseMock()),
            { status: 201, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getUsersRetrieveMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) => {
    return http.get("*/api/v1/users/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getUsersRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getUsersUpdateMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<User> | User)) => {
    return http.put("*/api/v1/users/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getUsersUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getUsersPartialUpdateMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<User> | User)) => {
    return http.patch("*/api/v1/users/:id/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getUsersPartialUpdateResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}

export const getUsersDestroyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
    return http.delete("*/api/v1/users/:id/", async (info) => {
        await delay(1000)
        if (typeof overrideResponse === "function") {
            await overrideResponse(info)
        }
        return new HttpResponse(null, { status: 204 })
    })
}

export const getWidgetsRetrieveMockHandler = (overrideResponse?: WidgetsBatch | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<WidgetsBatch> | WidgetsBatch)) => {
    return http.get("*/api/v1/widgets/", async (info) => {
        await delay(1000)

        return new HttpResponse(
            JSON.stringify(overrideResponse !== undefined ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) : getWidgetsRetrieveResponseMock()),
            { status: 200, headers: { "Content-Type": "application/json" } }
        )
    })
}
export const getWijckieAPIMock = () => [
    getCsrfRetrieveMockHandler(),
    getDailyTodoItemsListMockHandler(),
    getDailyTodoItemsCreateMockHandler(),
    getDailyTodoItemsUpdateMockHandler(),
    getDailyTodoItemsPartialUpdateMockHandler(),
    getDailyTodoOptionsListMockHandler(),
    getDailyTodoOptionsCreateMockHandler(),
    getDailyTodoOptionsRetrieveMockHandler(),
    getDailyTodoOptionsUpdateMockHandler(),
    getDailyTodoOptionsPartialUpdateMockHandler(),
    getDailyTodoOptionsDestroyMockHandler(),
    getDailyTodosModulesListMockHandler(),
    getDailyTodosModulesCreateMockHandler(),
    getDailyTodosModulesRetrieveMockHandler(),
    getDailyTodosModulesUpdateMockHandler(),
    getDailyTodosModulesPartialUpdateMockHandler(),
    getDailyTodosModulesDestroyMockHandler(),
    getDailyTodosWidgetsListMockHandler(),
    getDailyTodosWidgetsCreateMockHandler(),
    getDailyTodosWidgetsRetrieveMockHandler(),
    getDailyTodosWidgetsUpdateMockHandler(),
    getDailyTodosWidgetsPartialUpdateMockHandler(),
    getDailyTodosWidgetsDestroyMockHandler(),
    getFileUploadsCreateMockHandler(),
    getInspirationItemsListMockHandler(),
    getInspirationItemsCreateMockHandler(),
    getInspirationModulesListMockHandler(),
    getInspirationModulesCreateMockHandler(),
    getInspirationModulesRetrieveMockHandler(),
    getInspirationModulesUpdateMockHandler(),
    getInspirationModulesPartialUpdateMockHandler(),
    getInspirationModulesDestroyMockHandler(),
    getInspirationOptionsListMockHandler(),
    getInspirationOptionsCreateMockHandler(),
    getInspirationOptionsRetrieveMockHandler(),
    getInspirationOptionsUpdateMockHandler(),
    getInspirationOptionsPartialUpdateMockHandler(),
    getInspirationOptionsDestroyMockHandler(),
    getInspirationWidgetsListMockHandler(),
    getInspirationWidgetsCreateMockHandler(),
    getInspirationWidgetsRetrieveMockHandler(),
    getInspirationWidgetsUpdateMockHandler(),
    getInspirationWidgetsPartialUpdateMockHandler(),
    getInspirationWidgetsDestroyMockHandler(),
    getUsersListMockHandler(),
    getUsersCreateMockHandler(),
    getUsersRetrieveMockHandler(),
    getUsersUpdateMockHandler(),
    getUsersPartialUpdateMockHandler(),
    getUsersDestroyMockHandler(),
    getWidgetsRetrieveMockHandler(),
]
